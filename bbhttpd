#!/bin/sh

[ -z "$LOG" ] && LOG="/tmp/bbhttpd.log"
[ -z "$IP" ] && IP=''
[ -z "$PORT" ] && PORT=8080
[ -z "$LOGLEVEL" ] && LOGLEVEL='info'
[ -z "$INDEX" ] && INDEX='index.html'
[ -z "$DIRINDEX" ] && DIRINDEX=1
[ -z "$ERRPATH" ] && ERRPATH=`dirname "$0"`'/errors'
[ -z "$ERRORHTML" ] && ERRORHTML=`dirname "$0"`'/errors/common.html'
ROOT=`pwd`
CGI=1

RESPLIST='200 OK
400 Bad Request
403 Forbidden
404 Not Found
500 Internal server error
501 Not Implemented
504 Gateway Timeout'

CSS='body {background-color: #151515}
h1 {color: #C6B6EE}
.tableTitle td {color: #A0A8B0; background: #384048; font-weight: bold}
.fileRow {color: #333; background: #CFC}
.folderRow {color: #333; background: #FFC}
.fileRow a {color: #333}
.folderRow a {color: #333}
.fileRow:hover {background-color: #9F9}
.folderRow:hover {background-color: #FF9}
.hoverTable{width:100%; border-collapse:collapse}
.hoverTable td{padding:7px; border:#000 1px solid} 
.header {color: #99AD6A; width: 100%; background: #1F1F1F; border: #000 1px solid; text-align: right}
.footer {color: #99AD6A; width: 100%; background: #1F1F1F; border: #000 1px solid; text-align: center}
.header a {color: #FFB964}
.footer a {color: #FFB964}
.error {color: #CF6A4C; width: 100%; background: #101010; text-align: center; border: #000 1px solid}
.error h1 {color: #CF6A4C}
.unreachable {background: #CCC}
.emptyFolder {background: #FCC}'

TPLS='
FILE:<svg version="1.1" width="16" height="16"><g transform="translate(0,-1036.3622)"><path d="m 3.1849807,1051.3584 c 2.81506,0 9.2781303,0 9.7995303,0 0,0 -0.10303,-11.8953 -0.10303,-12.4615 l -1.7205,-1.6364 -7.9461203,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /></g></svg>
FOLDER:<svg version="1.1" width="18" height="16"><g transform="translate(0,-1036.3622)"><path d="m 16.458819,1039.6993 -10.392939,0 -0.98381,-1.3385 -3.41487,0 -0.0362,11.2844 14.827799,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /></g></svg>
UP:<svg version="1.1" width="16" height="16"><g transform="translate(0,-1036.3622)" style="fill:#ccff00;fill-opacity:1"><path d="m 5.7114411,1043.5825 -4.18334,0 c 2.17135,-2.1074 4.34271,-4.2147 6.51406,-6.322 2.2106399,2.0756 4.3681699,4.2104 6.5439499,6.322 l -4.21323,0 0,7.912 -4.6315599,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997000000002;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /></g></svg>
DOWN:<svg version="1.1" width="16" height="16"><g transform="translate(0,-1036.3622)"><path d="m 5.7114411,1045.1725 -4.18334,0 c 2.17135,2.1074 4.34271,4.2147 6.51406,6.322 2.2106399,-2.0756 4.3681699,-4.2104 6.5439499,-6.322 l -4.21323,0 0,-7.912 -4.6315599,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /></g></svg>
GZ:<svg version="1.1" width="16" height="16"><g transform="translate(0,-1036.3622)"><g transform="translate(-3.0900933,1036.2865)"><path d="m 8.8208606,8.8860008 -4.1833436,0 c 2.1713545,2.1073322 4.3427092,4.2146692 6.514065,6.3220032 2.210636,-2.075586 4.368168,-4.210377 6.543944,-6.3220032 l -4.213225,0 0,1.2973292 -4.6315592,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /><path d="m 11.897059,0.973981 5,0 -5,5.9999997 5,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 10.499999,2.007314 0,-1.033333 -4.999999,0 0,5.9999997 4.999999,0 0,-2.479057 -1.266665,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /></g></g></svg>
BZ2:<svg version="1.1" width="22" height="16"><g transform="translate(0,-1036.3622)"><g transform="translate(-0.11660157,1036.2865)"><path d="m 8.8208606,8.8860008 -4.1833436,0 c 2.1713545,2.1073322 4.3427092,4.2146692 6.514065,6.3220032 2.210636,-2.075586 4.368168,-4.210377 6.543944,-6.3220032 l -4.213225,0 0,1.2973292 -4.6315592,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /><path d="m 8.4640587,0.973981 5.0000003,0 -5.0000003,5.9999997 5.0000003,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 2.052,6.9739816 0,-6.0000006 4.1483597,0 0.85164,0.85164 0,1.160808 -0.700452,0.637953 -4.2995477,0 4.2897817,0 0.710218,0.410045 0,2.2518345 -0.68772,0.6877201 z" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 15.066719,2.185042 0,-1.211061 5,0 0,1.776746 -5,2.2482539 0,1.9750007 5,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /></g></g></svg>
TGZ:<svg version="1.1" width="22" height="16"><g transform="translate(0,-1036.3622)"><g transform="translate(0.03307998,1036.2865)"><path d="m 8.8208606,8.8860008 -4.1833436,0 c 2.1713545,2.1073322 4.3427092,4.2146692 6.514065,6.3220032 2.210636,-2.075586 4.368168,-4.210377 6.543944,-6.3220032 l -4.213225,0 0,1.2973292 -4.6315592,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /><path d="m 1.9142136,0.942731 5,0 z m 2.499999,0.03125 0,5.9999997 z" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 13.431028,2.007314 0,-1.033333 -4.9999994,0 0,5.9999997 4.9999994,0 0,-2.479057 -1.266665,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 14.985728,0.973981 5,0 -5,5.9999997 5,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /></g></g></svg>
TBZ2:<svg version="1.1" width="28" height="16"><g transform="translate(2.872768,-0.0608675)"><path d="m 8.8208606,8.8860008 -4.1833436,0 c 2.1713545,2.1073322 4.3427092,4.2146692 6.514065,6.3220032 2.210636,-2.075586 4.368168,-4.210377 6.543944,-6.3220032 l -4.213225,0 0,1.2973292 -4.6315592,0 z" style="fill:#ccff00;fill-opacity:1;stroke:#151515;stroke-width:0.94199997;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none" /><path d="m -1.186,0.942731 5,0 z m 2.499999,0.03125 0,5.9999997 z" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 11.797126,0.973981 5,0 -5,5.9999997 5,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 5.3850673,6.9739816 0,-6.0000006 4.1483597,0 0.85164,0.85164 0,1.160808 -0.700452,0.637953 -4.2995477,0 4.2897817,0 0.710218,0.410045 0,2.2518345 -0.68772,0.6877201 z" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /><path d="m 18.399786,2.185042 0,-1.211061 5,0 0,1.776746 -5,2.2482539 0,1.9750007 5,0" style="fill:none;stroke:#151515;stroke-width:1px;stroke-linecap:round;stroke-linejoin:round;stroke-opacity:1" /></g></svg>'

busyboxer() {
    [ -z "$BB" ] && BB='busybox'
    alias bb="$BB"
    for cmd in `$BB | $BB sed '/\[,/,/ zcat/!d;s/,//g'`; do
        alias $cmd="$BB $cmd"
    done
    PREF=`dirname "$0"`
}

# Logging function
l() {
    [ -z "$LPREF" ] && LPREF='date +%Y.%m.%d-%H:%M:%S'
    if [ -n "$2" ]; then
        case "$1" in
            d)
                if [ "$LOGLEVEL" = "debug" ]; then
                    echo `$LPREF`"   DEBUG: $2"
                fi
            ;;
            i)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ]; then
                    echo `$LPREF`"    INFO: $2"
                fi
            ;;
            n)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ] || [ "$LOGLEVEL" = "notice" ]; then
                    echo `$LPREF`"  NOTICE: $2"
                fi
            ;;
            w)
                if [ "$LOGLEVEL" = "debug" ] || [ "$LOGLEVEL" = "info" ] || [ "$LOGLEVEL" = "warning" ] || [ "$LOGLEVEL" = "notice" ]; then
                    echo `$LPREF`" WARNING: $2"
                fi
            ;;
            e)
                echo `$LPREF`"   ERROR: $2"
            ;;
            f)
                echo `$LPREF`"   FATAL: $2"
            ;;
            fe)
                echo `$LPREF`"   FATAL: $2"
                echo `$LPREF`"    INFO: All next operations will be cancelled..."
                [ -n "$3" ] && exit $3 || exit 1
            ;;
        esac
    else
        case "$1" in
            fe)
                echo `$LPREF`" FATAL: Not enough parameters."
                echo `$LPREF`" INFO: All next operations will be cancelled..."
                exit 1
            ;;
            *)
                l i "$1"
            ;;
        esac
    fi
}

#Delimiter function
d() {
    echo
}

urlencode(){
    LANG=C  export LANG
    echo "$1" | awk '
        BEGIN {
            split ("1 2 3 4 5 6 7 8 9 A B C D E F", hextab, " ")
            hextab [0] = 0
            for ( i=1; i<=255; ++i ) ord [ sprintf ("%c", i) "" ] = i + 0
        }
        {
            encoded = ""
            for ( i=1; i<=length ($0); ++i ) {
                c = substr ($0, i, 1)
                if ( c ~ /[a-zA-Z0-9.-]/ ) {
                    printf("%s",c)
                } else if ( c == " " ) {
                    printf "+"
                } else {
                    lo = ord [c] % 16
                    hi = int (ord [c] / 16);
                    printf("%s%s%s", "%", hextab[hi], hextab [lo])
                }
            }
       } END { print "" }'
}

urldecode(){
    echo "$1" | sed -e 's/%\([0-9A-F][0-9A-F]\)/\\\\\x\1/g' | xargs echo -e
}

header(){
    echo '<html>
            <head>
                <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
                <title>BBHTTPd - '"$URL"'</title>
                <style style="text/css">
                    '"$CSS"'
                </style>
            </head>
            <body>
                <div class="header"><a href="https://github.com/alive-corpse/bbhttpd" target="_blank">BBHTTPd</a> nano web server by <a href="mailto:evgeniy.shumilov@gmail.com">Evgeniy Shumilov</a></div>'
}

footer(){
    echo "<div class=\"footer\">This is free software under <a href=\"http://www.gnu.org/licenses/old-licenses/gpl-2.0.html\" target=\"blank\">GPLv2</a> license</div></body></html>"
}

wrap(){
    header
    echo "$1"
    footer
}

t() {
    l n "Test # $1" >> "$LOG"
}

ch() { # Check option for y/n, 1/0, etc.
    [ -n "$(echo "$1" | busybox grep -i '^\(true\|yes\|1\)$')" ] && echo true
}

templater() { # First parameter is rawtext, second - appending to templates list
    if [ -n "$1" ]; then
        res="$1"
        tpllst=`echo -e "$TPLS\n$2" | cut -d ":" -f1`
        for tpl in $tpllst; do
            rep=`echo -e "$TPLS\n$2" | sed '/^'"$tpl"':/!d;s/^'"$tpl"'://;s/#/\\\#/g'`
            res=`echo "$res" | sed 's#<!--%'"$tpl"'%-->#'"$rep"'#g'`
        done
        echo "$res"
    fi
}

resp(){
    r=`echo "$RESPLIST" | awk '$1~/^'"$1"'$/'`
    case "$1" in
        200)
            l i "HOST: $HOST URL: $URL -- 200 OK" >> "$LOG"
            if [ -z "$down" ]; then
                if [ -n "$2" ]; then
                    h="HTTP/1.1 200 OK\r\nContent-Type: $2\r\nConnection: close\r\n"
                else
                    h="HTTP/1.1 200 OK\r\nConnection: close\r\n"
                fi
            else
                h="HTTP/1.1 200 OK\r\n"
                fn=`basename "$URL$(echo "$URLPARAMS" | sed 's/ /\n/g' | sed '/^down/!d;s/^down//;s/_/./')"`
                h="$h""Content-disposition: attachment; filename=$down\r\nContent-Type: application/force-download\r\nConnection: close\r\n"
            fi
            busybox echo -e "$h\r"
        ;;
        *)
            l w "HOST: $HOST URL: $URL -- $r" >> "$LOG"
            busybox echo -e "HTTP/1.1 $r\r\n\r"
            if [ -n "$1" ]; then
                if [ -f "$ERRPATH/$1.html" ]; then
                    cat "$ERRPATH/$1.html"
                else
                    if [ -f "$ERRORHTML" ]; then
                        cat "$ERRORHTML" | sed 's/%ERROR%/'"$r"'/g'
                    else
                        wrap "<div class=\"error\"><h1>$r</h1></div>"
                    fi
                fi
            fi
        ;;
    esac
}

mimeresp(){
    if [ -n "$1" ]; then
        case "$1" in
            *.gz)
                mt="application/x-gzip"
            ;;
            *.bz2|*.bzip2)
                mt="application/bzip2"
            ;;
            *.tar.gz|*.tgz)
                mt="application/x-tgz"
            ;;
            *.tbz2|*.tar.bz2)
                mt="application/x-bzip2"
            ;;
            *.tar)
                mt="application/x-tar"
            ;;
            *.zip)
                mt="application/zip"
            ;;
            *.gif)
                mt="image/gif"
            ;;
            *.jpg|*.jpeg)
                mt="image/jpeg"
            ;;
            *.png)
                mt="image/png"
            ;;
            *.css)
                mt="text/css"
            ;;
            *.html|*.htm)
                mt="text/html"
            ;;
            *.js)
                mt="text/javascript"
            ;;
            *.log|*.conf|*.text|*.txt|*.values)
                mt="text/plain"
            ;;
            *.xml)
                mt="text/xml"
            ;;
            *)
                mt="application/octet-stream"
            ;;
        esac
        resp 200 "$mt"
        cat "$1"
    else
        l e "Fail to get content from mime func because of empty param"
    fi
}

#TODO: Size of file's conversion
ls2trs() { # Listing of directory to table rows"
    [ -n "$1" ] && curdir=`pwd` && cd $1
    for fn in *; do
        if [ "$fn" != '*' ]; then
            ffn=`echo "$URL/$fn" | sed 's#/[/]*#/#g'`
            ! [ -r "$fn" ] && unreach='unreachable' || unreach=''
            if [ -d "$fn" ]; then
                [ -r "$fn" ] && busybox ls -la "$fn" | awk '$9~/^\.$/ {print "<tr class=\"folderRow\" align=\"right\"><td class=\"folderIcon\" align=\"center\"><!--%FOLDER%--></td><td align=\"center\"><a href=\"'"$ffn"'?down_tgz\"><!--%TGZ%--></a>&nbsp;<a href=\"'"$ffn"'?down_tbz2\"><!--%TBZ2%--></a></td><td align=\"left\"><a href=\"'"$ffn"'\">'"$fn"'</a></td><td></td><td>"$6" "$7" "$8"</td></tr>"}' || echo "<tr class=\"unreachable\"><td align=\"center\"><!--%FOLDER%--></td><td align=\"center\">---</td><td>"$fn"</td><td></td><td></td></tr>"
            else
                [ -r "$fn" ] && busybox ls -la "$fn" | awk '{print "<tr class=\"fileRow\" align=\"right\"><td class=\"fileIcon\" align=\"center\"><!--%FILE%--></td><td align=\"center\"><a href=\"'"$ffn"'?down\"><!--%DOWN%--></a><a href=\"'"$ffn"'?down_gz\"><!--%GZ%--></a><a href=\"'"$ffn"'?down_bz2\"><!--%BZ2%--></a></td><td align=\"left\"><a href=\"'"$ffn"'\" target=\"blank\">'"$fn"'</a></td><td align=\"right\">"$5"</td><td>"$6" "$7" "$8"</td></tr>"}' || echo "<tr class=\"unreachable\"><td align=\"center\"><!--%FILE%--></td><td align=\"center\">---</td><td>"$fn"</td><td></td><td></td></tr>"

            fi
        else
            echo '<tr class="emptyFolder"><td colspan=5 align="center"><h3>NOTHING INTERESTING HERE</h3></tr>'
        fi
    done
    [ -n "$curdir" ] && cd "$curdir"
}

response() {
    if [ -n "$URL" ]; then
        RU=`echo "$ROOT/$URL" | sed 's#/[/]*#/#g'`
        if [ -r "$RU" ]; then
            if [ -d "$RU" ]; then
                if [ -n "$down" ]; then
                    curdir=`pwd`
                    cd `dirname "$RU"`
                    resp 200
                    case "$down" in
                        *.tgz)
                            tar cfO - `basename "$RU"` | gzip
                        ;;
                        *.tbz2)
                            tar cfO - `basename "$RU"` | bzip2
                        ;;
                    esac
                    cd "$curdir"
                else
                    if `ch "$DIRINDEX"`; then
                        resp 200
                        header
                        echo "<h1>Directory listing $URL</h1>"
                        [ "$URL" = '/' ] && GET='' || UP="<a href=\""`dirname "$URL"`"\"><!--%UP%--></a>"
                        UP=`templater "$UP"`
                        echo "<table class=\"hoverTable\"><tr class=\"tableTitle\" align=\"center\"><td width=30px>$UP</td><td width=60px>DWL</td><td>Name</td><td width=80px>Size</td><td width=160px>Date</td>"
                        type='d'
                        templater "$(ls2trs "$RU")"
                        echo "</table>"
                        footer
                    else
                        if [ -n "$INDEX" ]; then
                            GET="$URL/$INDEX"
                            response
                        fi
                    fi
                fi
            else
                if [ -f "$RU" ]; then
                    case "$URL" in
                        #*.html|*.css|*.js|*.values|*.alerts|*.svg)
                            #cat "$RU"
                        #;;
                        #*) # Wrapped into html text
                            #echo '<html><body>'
                            #cat "$RU" | sed 's/$/<br>/'
                            #echo '</body></html>'
                        #;;
                        *)

                            if [ -n "$down" ]; then
                                case "$down" in
                                    *.gz)
                                        resp 200 "application/gzip"
                                        cat "$RU" | gzip
                                    ;;
                                    *.bz2)
                                        resp 200 "applicaion/bzip2"
                                        cat "$RU" | bzip2
                                    ;;
                                    *)
                                        t 'test'
                                        mimeresp "$RU"
                                    ;;
                                esac
                            else
                                if `ch "$CGI"`; then
                                    if [ -n "$(sed '1!d;/^#\!\/[a-z\/]\?/!d' "$RU")" ]; then

#TODO: stderr, stdout, timeout, killer function, wait function

    #gc cmd | sh > "$so" 2>"$se" &
     #pid="$!"
     #sleep 0.1
     #$PREF/killer "$id" "$pid" "$to"
     #l "$id: Waiting for metric result"
     #wait "$pid"
     #out=`cat "$so"`; err=`cat "$se"`
     #l d "$id: Removing temporary files"
     #rm "$so" "$se"
     #if [ -n "$err" ]; then
         #l w "$id: Error output for metric process is not empty, check error log for metric $id"

                                        l d "Executing $RU" >> "$LOG"
                                        if res=`$RU "$CLIENTPARAMS" "$GETPARAMS" "$POSTPARAMS" 2>&1`; then
                                            l d "Successfully executed file $RU" >> "$LOG"
                                            resp 200
                                            echo "$res"
                                        else
                                            resp 500
                                            l f "Fail to execute $RU" >> "$LOG"
                                        fi
                                    else
                                        mimeresp "$RU"
                                    fi
                                else
                                    mimeresp "$RU"
                                fi
                            fi
                        ;;
                    esac
                fi
            fi
        else
            [ -e "$RU" ] && resp 403 || resp 404
        fi
    fi
}

busyboxer
PARAMS=''
case "$1" in
    start)
        [ -n "$2" ] && PORT="$2"
        [ -n "$3" ] && IP="$2" && PORT="$3"
        [ -n "$IP" ] && busybox nc -ll "$IP" -p "$PORT" -e "$0" || busybox nc -ll -p "$PORT" -e "$0"
    ;;
    h|help)
        echo -e "\nBBHTTPd - smallest web server\n(busybox: $BB)\nUsage: $0 start\n       $0 start <port number>\n       $0 start <ip address> <port number>\n\n"
    ;;
    *)
        d >> "$LOG"
        l d "New session started" >> "$LOG"
        d >> "$LOG"
        CLIENTPARAMS=''; GETPARAMS=''; POSTPARAMS=''
        while read line; do
            line=`echo "$line" | sed 's/.$//'`
            [[ ! `ch "$DIRINDEX"` ]] && [[ -n "$(echo "$line" | grep '^GET / ')" ]] && line=`echo "$line" | sed 's#^GET /#GET /'"$INDEX"'#'`
            CLIENTPARAMS="$CLIENTPARAMS\n$line"
            case $line in
                GET*)
                    GET=`urldecode "$(echo "$line" | awk '{ gsub(/\?.*$/,"",$2); print $2 }')"` && URL="$GET"
                    [[ "$GET" == "/" ]] && [[ ! `ch "$DIRINDEX"` ]] && GET="/$INDEX"
                    GETPARAMS=`urldecode "$(echo "$line" | awk '$2~/\?/ { gsub(/^.*\?/,"",$2); gsub(/&/," ",$2); print $2 }')"`
                    for p in $GETPARAMS; do
                        [ -n "$(echo "$p" | grep '^down')" ] && down="$(echo `basename "$GET"``echo "$p" | sed 's/^down//;s/^_/./'`)"
                    done
                ;;
                POST*)
                    POST=`urldecode "$(echo "$line" | awk '{ gsub(/\?.*$/,"",$2); print $2 }')"` && URL="$POST"
                    GETPARAMS=`urldecode "$(echo "$line" | awk '$2~/\?/ { gsub(/^.*\?/,"",$2); gsub(/&/," ",$2); print $2 }')"`
                    for p in $GETPARAMS; do
                        [ -n "$(echo "$p" | grep '^down')" ] && down="$(echo `basename "$GET"``echo "$p" | sed 's/^down//;s/^_/./'`)"
                    done
                ;;
                Content-Length:*)
                    CL=`echo "$line" | cut -d " " -f 2`
                ;;
                Host:*)
                    HOST=`echo "$line" | cut -d " " -f 2`
                ;;
            esac
            if  [ -n "$line" ]; then
                l d " $line" >> "$LOG"
            else 
                break
            #else
                #if [ -n "$POST" ]; then
                    #read POSTPARAMS; line=''
                    #read line
                    #read line
                    #read line
                        #POSTPARAMS="$POSTPARAMS\n$line"
                        #t "$line"
                    #l d "POST: $line" >> "$LOG"
                    #[ -n "$URL" ] && response && break 
                    #t "$tmp"
                #else
                    #[ -n "$URL" ] && response && break
                #fi
            fi
        done
        if [ -n "$POST" ]; then
            POSTPARAMS=''
            while read line; do
                [ -n "$POSTPARAMS" ] && POSTPARAMS="$POSTPARAMS\n$line" || POSTPARAMS="$line"
                len="$(echo "$POSTPARAMS" | awk '{l+=length($0)} END {print l}')"
                if ! [ "$len" -lt "$CL" ]; then
                    break
                fi
            done
        fi
        [ -n "$URL" ] && response && break
    ;;
esac


